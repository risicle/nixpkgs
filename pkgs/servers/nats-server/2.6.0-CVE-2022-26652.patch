Based on upstream https://github.com/nats-io/nats-server/commit/b4128693ed61aa0c32179af07677bcf1d8301dcd
with test changes removed (as we don't run them (yet)) and
the path -> filepath changes omitted as it is for the benefit
of windows, which we don't really support

--- a/server/stream.go
+++ b/server/stream.go
@@ -3620,6 +3619,17 @@
 	}
 	defer os.RemoveAll(sdir)
 
+	logAndReturnError := func() error {
+		a.mu.RLock()
+		err := fmt.Errorf("unexpected content (account=%s)", a.Name)
+		if a.srv != nil {
+			a.srv.Errorf("Stream restore failed due to %v", err)
+		}
+		a.mu.RUnlock()
+		return err
+	}
+	sdirCheck := filepath.Clean(sdir) + string(os.PathSeparator)
+
 	tr := tar.NewReader(s2.NewReader(r))
 	for {
 		hdr, err := tr.Next()
@@ -3629,7 +3639,13 @@
 		if err != nil {
 			return nil, err
 		}
-		fpath := path.Join(sdir, filepath.Clean(hdr.Name))
+		if hdr.Typeflag != tar.TypeReg && hdr.Typeflag != tar.TypeRegA {
+			return nil, logAndReturnError()
+		}
+		fpath := filepath.Join(sdir, filepath.Clean(hdr.Name))
+		if !strings.HasPrefix(fpath, sdirCheck) {
+			return nil, logAndReturnError()
+		}
 		os.MkdirAll(filepath.Dir(fpath), defaultDirPerms)
 		fd, err := os.OpenFile(fpath, os.O_CREATE|os.O_RDWR, 0600)
 		if err != nil {
diff --git a/server/jetstream_test.go b/server/jetstream_test.go
index e715241633..078da74269 100644
--- a/server/jetstream_test.go
+++ b/server/jetstream_test.go
@@ -15254,6 +15137,66 @@ func TestJetStreamRecoverStreamWithDeletedMessagesNonCleanShutdown(t *testing.T)
 	require_NoError(t, err)
 }
 
+func TestJetStreamRestoreBadStream(t *testing.T) {
+	s := RunBasicJetStreamServer()
+	if config := s.JetStreamConfig(); config != nil {
+		defer removeDir(t, config.StoreDir)
+	}
+	defer s.Shutdown()
+
+	nc, _ := jsClientConnect(t, s)
+	defer nc.Close()
+
+	var rreq JSApiStreamRestoreRequest
+	buf, err := os.ReadFile("../test/configs/jetstream/restore_bad_stream/backup.json")
+	require_NoError(t, err)
+	err = json.Unmarshal(buf,
&rreq)
+	require_NoError(t, err)
+
+	data, err := os.Open("../test/configs/jetstream/restore_bad_stream/stream.tar.s2")
+	require_NoError(t, err)
+	defer data.Close()
+
+	var rresp JSApiStreamRestoreResponse
+	msg, err := nc.Request(fmt.Sprintf(JSApiStreamRestoreT, rreq.Config.Name), buf, 5*time.Second)
+	require_NoError(t, err)
+	json.Unmarshal(msg.Data, &rresp)
+	if rresp.Error != nil {
+		t.Fatalf("Error on restore: %+v", rresp.Error)
+	}
+
+	var chunk [1024]byte
+	for {
+		n, err := data.Read(chunk[:])
+		if err == io.EOF {
+			break
+		}
+		require_NoError(t, err)
+
+		msg, err = nc.Request(rresp.DeliverSubject, chunk[:n], 5*time.Second)
+		require_NoError(t, err)
+		json.Unmarshal(msg.Data, &rresp)
+		if rresp.Error != nil {
+			t.Fatalf("Error on restore: %+v", rresp.Error)
+		}
+	}
+	msg, err = nc.Request(rresp.DeliverSubject, nil, 5*time.Second)
+	require_NoError(t, err)
+	json.Unmarshal(msg.Data, &rresp)
+	if rresp.Error == nil || !strings.Contains(rresp.Error.Description, "unexpected") {
+		t.Fatalf("Expected error about unexpected content, got: %+v", rresp.Error)
+	}
+
+	dir := filepath.Join(s.JetStreamConfig().StoreDir, globalAccountName)
+	f1 := filepath.Join(dir, "fail1.txt")
+	f2 := filepath.Join(dir, "fail2.txt")
+	for _, f := range []string{f1, f2} {
+		if _, err := os.Stat(f); err == nil {
+			t.Fatalf("Found file %s", f)
+		}
+	}
+}
+
 ///////////////////////////////////////////////////////////////////////////
 // Simple JetStream Benchmarks
 ///////////////////////////////////////////////////////////////////////////
 
